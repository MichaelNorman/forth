%ifndef FORTH_INTERNALS_NINC
%define FORTH_INTERNALS_NINC

;constants
BITS 64
STD_INPUT_HANDLE       equ -10
STD_OUTPUT_HANDLE      equ -11
INPUT_BUFFER_SIZE      equ 256
READ_CHUNK             equ 254   ; leave room to append '\n' or NULL, as appropriate. cf. input_buffer
%define LINE_SIZE 8
%define LINES_PER_BLOCK  16
%define BLOCK_SIZE 128
%define BLOCKS_PER_SEGMENT 64
%define SEGMENT_SIZE 8192
%define DATA_STACK_SIZE 1024
%define CELL_SIZE 8

;word flags and mask
%define f8PRIMITIVE 0b10000000
%define f8IMMEDIATE 0b01000000
%define m8WORD_LEN  0b00001111

;word data bit pattern
;|mask(4 bits):len(4 bits)|word (120)|code_pointer(32)/previous_pointer(32)/pad(64)|
;^--------------qword----------------^---------------dword-----------------^-dword-^
;^--------------qword----------------^-------------------qword---------------------^
%define              WORD_SIZE_BYTE 16
%define              WORD_SIZE_BIT  128

%macro _overflow 0 ; TODO: simplify to index-based
    ;N number of items to check post.  r8
    ;M 'min' address                   r9
    ;I index, unscaled                 r10
    ;E end of stack.                   r11
    add r10, r8 ; see where we'd end up
    shl r10, 3 ; turn index into offset
    sub r9, r10 ; move the pointer in the right direction
    cmp r11, r9 ; are we inside our stack frame?
    jg .data_stack_overflow
%endmacro

%macro _underflow 0 ; TODO: simplify to index-based
    ;N number of items to check prior. r8
    ;M 'min' address                   r9
    ;I index, unscaled                 r10
    ;E 'min' address, again            r11
    sub r10, r8 ; see where we'd end up
    shl r10, 3 ; turn index into offset
    sub r9, r10 ; move the pointer in the right direction
    cmp r11, r9 ; are we inside our stack frame?
    jl .data_stack_underflow
%endmacro

%endif